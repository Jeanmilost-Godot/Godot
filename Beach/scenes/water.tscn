[gd_scene load_steps=7 format=3 uid="uid://b325h6q3flp3g"]

[sub_resource type="Shader" id="Shader_o7vqu"]
code = "/**
* Water shader mateiral
*@author Jean-Milost Reymond
*/

shader_type       spatial;
render_mode       blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4      albedo             : source_color;
uniform sampler2D texture_albedo     : source_color,filter_linear_mipmap,repeat_enable;
uniform float     point_size         : hint_range(0,128);
uniform float     roughness          : hint_range(0,1);
uniform sampler2D texture_metallic   : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4      metallic_texture_channel;
uniform sampler2D texture_roughness  : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float     specular;
uniform float     metallic;
uniform sampler2D texture_refraction : filter_linear_mipmap,repeat_enable;
uniform float     refraction         : hint_range(-16,16);
uniform vec4      refraction_texture_channel;
uniform sampler2D screen_texture     : hint_screen_texture, repeat_disable, filter_linear_mipmap;uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float     normal_scale       : hint_range(-16,16);
varying vec3      uv1_triplanar_pos;
uniform float     uv1_blend_sharpness;
varying vec3      uv1_power_normal;
uniform vec3      uv1_scale;
uniform vec3      uv1_offset;
uniform vec3      uv2_scale;
uniform vec3      uv2_offset;

void vertex()
{
    vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

    TANGENT   = vec3(0.0,0.0,-1.0) * abs(normal.x);
    TANGENT  += vec3(1.0,0.0,0.0) * abs(normal.y);
    TANGENT  += vec3(1.0,0.0,0.0) * abs(normal.z);
    TANGENT   = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);
    BINORMAL  = vec3(0.0,1.0,0.0) * abs(normal.x);
    BINORMAL += vec3(0.0,0.0,-1.0) * abs(normal.y);
    BINORMAL += vec3(0.0,1.0,0.0) * abs(normal.z);
    BINORMAL  = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

    uv1_power_normal=pow(abs(normal),vec3(uv1_blend_sharpness));

    // water movement moving front and back
    //uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz * uv1_scale + uv1_offset + TIME * sin(TIME) * 0.0001;

    // water movement moving continually on the front
    uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz * uv1_scale + uv1_offset + TIME * 0.05;

    uv1_power_normal  /= dot(uv1_power_normal,vec3(1.0));
    uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos)
{
    vec4 samp=vec4(0.0);
    samp += texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
    samp += texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
    samp += texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
    return samp;
}

void fragment()
{
    vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
    ALBEDO          = albedo.rgb * albedo_tex.rgb;

    float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
    METALLIC           = metallic_tex * metallic;

    vec4  roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
    float roughness_tex             = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
    ROUGHNESS                       = roughness_tex * roughness;
    SPECULAR                        = specular;
    NORMAL_MAP                      = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
    NORMAL_MAP_DEPTH                = normal_scale;

    vec3 unpacked_normal = NORMAL_MAP;
    unpacked_normal.xy   = unpacked_normal.xy * 2.0 - 1.0;
    unpacked_normal.z    = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));

    vec3  ref_normal = normalize( mix(NORMAL,TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,NORMAL_MAP_DEPTH) );
    vec2  ref_ofs    = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction,uv1_power_normal,uv1_triplanar_pos),refraction_texture_channel) * refraction;
    float ref_amount = 1.0 - albedo.a * albedo_tex.a;

    EMISSION += textureLod(screen_texture,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
    ALBEDO   *= 1.0 - ref_amount;
    ALPHA     = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_hjf4j"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_pivka"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_hjf4j")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_muomo"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_hjf4j")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0f51o"]
render_priority = 0
shader = SubResource("Shader_o7vqu")
shader_parameter/albedo = Color(0.0470588, 0.317647, 0.466667, 0.505882)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = null
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.03, 0.03, 0.03)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_muomo")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_pivka")

[sub_resource type="BoxMesh" id="BoxMesh_s3kfa"]
material = SubResource("ShaderMaterial_0f51o")

[node name="Water" type="Node3D"]

[node name="Mesh" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_s3kfa")
